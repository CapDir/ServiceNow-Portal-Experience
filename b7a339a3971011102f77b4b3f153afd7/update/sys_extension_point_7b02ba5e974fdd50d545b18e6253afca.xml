<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_extension_point">
    <sys_extension_point action="INSERT_OR_UPDATE">
        <api_name>x_376096_pxp.PXPExtension</api_name>
        <description/>
        <example><![CDATA[/* global Class, gs, GlideRecordSecure, GlideRecord, GlideScopedEvaluator */
/* eslint no-undef: "error" */
var PXPExtension = Class.create();
PXPExtension.prototype = {
	initialize: function() {
		
    },
	
	/**
	 * Wether this Extension Point can query on the given table
	 * without creating additional cross scope privileges
	 *
	 * @param {string} table - the table's name (not label!)
	 * @returns {boolean}
	 */
	handlesTable: function (table) {
		// Note: While the following might be correct in most cases, this *must* be adjusted if you have opverlapping scopenames!
		if (table.startsWith(gs.getCurrentScopeName() + '_')) {
			return true;
		}
		
		return false;
	},
	
	/**
	 * Wether this Extension Point can execute scripts on the given scope
	 * without creating additional cross scope privileges
	 *
	 * @param {string} table - the scope's name (e.g. global or x_mycompany_app)
	 * @returns {boolean}
	 */
	handlesScope: function (scopeName) {
		return scopeName == gs.getCurrentScopeName();
	},

	/**
	 * This method is used to query on a certain table once it has been determined,
	 * that this Extension Point is suitable (by handlesScope).
	 * The records returned by this query will be used only to evaluate conditions of UI Action, Field Styles and Annotations.
	 *
	 * @param {string} table - The table to be queried on
	 * @param {string} encodedQuery - The encoded query to be executed
	 * @param {number} [limit] - if an limit is known for certain (e.g. sys_id=x), this parameter is set
	 * @returns {GlideRecord}
	 */
    queryRecords: function (table, encodedQuery, limit) {
		var recordGr = new GlideRecord(table);
		
		if (encodedQuery) {
			recordGr.addEncodedQuery(encodedQuery);

			if (limit) {
				recordGr.setLimit(limit);
			}

			recordGr.query();
		}
		
		return recordGr;
	},
	
	/**
	 * This method is used to query on a certain table once it has been determined,
	 * that this Extension Point is suitable (by handlesScope).
	 *
	 * @param {string} table - The table to be queried on
	 * @param {string} encodedQuery - The encoded query to be executed
	 * @param {number} [limit] - if an limit is known for certain (e.g. sys_id=x), this parameter is set
	 * @returns {GlideRecord}
	 */
    queryRecordsSecure: function (table, encodedQuery, limit) {
		var recordGr = new GlideRecordSecure(table);
		
		if (encodedQuery) {
			recordGr.addEncodedQuery(encodedQuery);

			if (limit) {
				recordGr.setLimit(limit);
			}

			recordGr.query();
		}
		
		return recordGr;
	},
	
	/**
	 * This method is used to set a temporary value on a record once it has been determined
	 * that this Extension Point is suitable (by handlesTable).
	 * This is required in order to evaluate annotations on new records.
	 *
	 * Note: The Portal Experience App will not perform any database changes on its own!
	 *
	 * @param {GlideRecord} anyGr
	 * @param {string} fieldName
	 * @param {string} fieldValue
	 */
	setTemporaryValue: function (anyGr, fieldName, fieldValue) {
		if (fieldName == 'sys_id') {
			anyGr.setNewGuidValue(fieldValue);
		} else {
			anyGr[fieldName] = fieldValue;
		}
	},

    type: 'PXPExtension'
};]]></example>
        <name>PXPExtension</name>
        <restrict_scope>false</restrict_scope>
        <sys_class_name>sys_extension_point</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-11 09:09:08</sys_created_on>
        <sys_id>7b02ba5e974fdd50d545b18e6253afca</sys_id>
        <sys_name>PXPExtension</sys_name>
        <sys_package display_value="Portal Experience" source="x_376096_pxp">b7a339a3971011102f77b4b3f153afd7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Portal Experience">b7a339a3971011102f77b4b3f153afd7</sys_scope>
        <sys_update_name>sys_extension_point_7b02ba5e974fdd50d545b18e6253afca</sys_update_name>
    </sys_extension_point>
</record_update>
